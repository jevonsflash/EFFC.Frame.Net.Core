<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFFC.Extends.LinqDLR2SQL</name>
    </assembly>
    <members>
        <member name="T:EFFC.Extends.LinqDLR2SQL.GeneralLinqDLR2SQLGenerator">
            <summary>
            LinqDLR2SQL用于sql生成的扩展接口
            </summary>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.LamdaSQLObject`1">
            <summary>
            用于LinqDLR2Sql构建动态栏位使用
            </summary>
            <typeparam name="TColumn"></typeparam>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LamdaSQLObject`1.BelongToTable">
            <summary>
            所属table
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LamdaSQLObject`1.SqlFlags">
            <summary>
            SQL相关的操作符号
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LamdaSQLObject`1.#ctor(System.String,EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags)">
            <summary>
            构建Lamda表达式对象
            </summary>
            <param name="table"></param>
            <param name="sqlflags"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LamdaSQLObject`1.ConvertVariableToLinqDLRColumn(System.Object[])">
            <summary>
            将c#的变量转化成LinqDLRColumn以便进行相关where操作
            </summary>
            <param name="args">args中最少有一个参数，如果有两个参数第一个参数必须为变量名称，第二个才是变量的值，如果只有一个参数则该参数为变量的值</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LamdaSQLObject`1.ConvertConstaValueToLinqDLRColumn(System.Object[])">
            <summary>
            将一个常量转化成LinqDLRColumn以便进行相关where操作
            </summary>
            <param name="args">只有一个参数</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LamdaSQLObject`1.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation">
            <summary>
            LinqDLR2SQL的操作枚举
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.None">
            <summary>
            无操作
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.Select">
            <summary>
            执行了select操作
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.SelectMany">
            <summary>
            执行了select many操作（from多个表)
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.SelectJoin">
            <summary>
            执行了join操作
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.Delete">
            <summary>
            执行了delete操作
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.Update">
            <summary>
            执行了update操作
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.Insert">
            <summary>
            执行了insert操作
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.Where">
            <summary>
            执行了Where操作
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.OrderBy">
            <summary>
            执行了OrderBy操作
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLOperation.GroupBy">
            <summary>
            执行了GroupBy操作
            </summary>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1">
            <summary>
            LinqDLR2Sql的基类，定义了LinqDLR2Sql的基本结构和已经实现的sql转化操作
            </summary>
            <typeparam name="TSource">lamda表达式执行时的动态识别类型，要想使用lamda表达式，此属性必备</typeparam>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.Item">
            <summary>
            LinqDLR2Sql下的元素对象
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.AliasName">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.SQLGenerator">
            <summary>
            sql生成器的扩展接口
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.CurrentOperationType">
            <summary>
            当前的操作类型
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.New``1(`0,System.String,System.String,EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator)">
            <summary>
            创建一个新的LinqDLR2SQL对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="table"></param>
            <param name="aliasName"></param>
            <param name="generator"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.ToSql">
            <summary>
            转为sql语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.LeftJoin">
            <summary>
            本表join的时候使用left方式
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql`1.RightJoin">
            <summary>
            本表join的时候使用right方式
            </summary>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend">
            <summary>
            LinqDLR2Sql操作扩展实现lamda表达式操作
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.SelectMany``3(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``1}},System.Func{``0,``1,``2})">
            <summary>
            做多重from筛选结果集
            lamda推理逻辑：
            1.lamda根据泛型来进行推算，因此SelectMany的算法只适用于泛型
            2.因为涉及到多重推算，即多个from，所以lamda会根据返回结果推算运用到参加下一次推算的TSource结构，
              即从上自下进行from推算，第一个和第二个from根据resultSelector算出了TResult的结构，返回值必须返回一个带TResult的对象，不然后面的推算就会失败，
              上面算出来的结果会参与到第三个的from运算，lamda根据上次返回的TResult作为这次运算中TSource的结构定义来参与本次运算。
              后面依次类推。
              所以resultSelector返回值TResult必须包含在返回值的结构定义中，不然递归推算就断裂
              所以selectmany只能用泛型来做定义
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCollector"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="from"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Select``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            执行select操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Where``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlWhereOperator})">
            <summary>
            执行linqDLR2Sql的where操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.OrderBy``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            正向排序操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.ThenBy``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            正向排序操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.OrderByDescending``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            逆向排序操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.ThenByDescending``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            逆向排序操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Take``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Int32)">
            <summary>
            执行Take操作，相当于sql的top
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Count``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            执行count操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Max``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            执行max操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Max``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            执行max操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Min``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            执行Min操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Min``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            执行Min操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Sum``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            执行Sum操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Sum``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            执行Sum操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Avg``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            执行Sum操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Avg``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            执行Sum操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.Distinct``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            执行Distinct操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.GroupBy``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1})">
            <summary>
            执行GroupBy操作，单表操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlExtend.GroupBy``3(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            执行GroupBy操作,join表操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator">
            <summary>
            LinqDLR2SQL生成器，用于LinqDLR2SQL生成sql，可以继承和扩展
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.SqlFlags">
            <summary>
            设定SQL相关的符号标记
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator._sql">
            <summary>
            sql语句
            </summary>
        </member>
        <member name="F:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator._joindirect">
            <summary>
            join的方向，left，right等
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.ConditionValues">
            <summary>
            条件中的值
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.CurrentOperation">
            <summary>
            当前操作类型
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Jointables">
            <summary>
            Join的table合集
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Prefix">
            <summary>
            sql中的前缀修饰词
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Selectmanytables">
            <summary>
            串联的table集合，非join
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Orderby">
            <summary>
            排序表达式
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Pearfix">
            <summary>
            sql中的尾部词
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Tables">
            <summary>
            sql中from后面的table
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Lastwhere">
            <summary>
            where条件
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Where">
            <summary>
            where表达式
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Columns">
            <summary>
            sql中的栏位项
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.GroupBy">
            <summary>
            Group by 表达式
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.NewColumnInstance(System.Object)">
            <summary>
            获取一个Column对象，可扩展
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoSelect``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            执行select的自定义处理
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoJoin``3(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``1},EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``2},System.Object,System.Object)">
            <summary>
            执行join操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TOuterItem"></typeparam>
            <typeparam name="TInnerItem"></typeparam>
            <param name="source"></param>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerkey"></param>
            <param name="innerkey"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoSelectMany``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``1})">
            <summary>
            执行select many的自定义处理
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TLastItem"></typeparam>
            <param name="source"></param>
            <param name="pretable"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoOrderBy``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Object)">
            <summary>
            执行排序操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="key"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoOrderByDescending``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Object)">
            <summary>
            执行逆向排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="key"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoWhere``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlWhereOperator)">
            <summary>
            执行where操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="where"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoTake``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Int32)">
            <summary>
            执行take操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="count"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoLeftJoin``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            本表join的时候使用left方式
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoRightJoin``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            本表join的时候使用right方式
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoCount``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            执行count操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoMax``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},``1)">
            <summary>
            执行max操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoMax``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            执行Max操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoMin``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},``1)">
            <summary>
            执行Min操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoMin``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            执行Min操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoSum``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},``1)">
            <summary>
            执行Sum操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoSum``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            执行Sum操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoAvg``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},``1)">
            <summary>
            执行Avg操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoAvg``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            执行Avg操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="column"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoDistinct``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            执行distinct操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoGroupBy``2(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``1},System.Object)">
            <summary>
            Group by操作
            </summary>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="pretable"></param>
            <param name="groupitems"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.DoGroupBy``1(EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.Object)">
            <summary>
            执行group by操作
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="groupitems"></param>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.ToSql">
            <summary>
            转为sql语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator.CopyFrom(EFFC.Extends.LinqDLR2SQL.LinqDLR2SQLGenerator)">
            <summary>
            copy
            </summary>
            <param name="from"></param>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.JoinItem">
            <summary>
            Join的对象
            </summary>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.LinqDLR2SqlWhereOperator">
            <summary>
            LinqDLR2Sql的where条件操作，实现and和or的逻辑处理
            </summary>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn">
            <summary>
            LinqDLR2Sql中动态对象的元素定义
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.SqlFlags">
            <summary>
            SQL中的相关符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.BelongToObject">
            <summary>
            所属的LamdaSQLObject的对象
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.ColumnExpress">
            <summary>
            select出来的栏位表达式，可以为名称，别名或表达式
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.ConditionValues">
            <summary>
            栏位操作中记录的条件值
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.WhereIn(System.Object[])">
            <summary>
            执行where中的in操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.WhereNotIn(System.Object[])">
            <summary>
            执行where中的not in操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.IsNullInSql(System.Object[])">
            <summary>
            sql中isnull(object,othervalue)的表达式实现
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Sum(System.Object[])">
            <summary>
            sql中的sum操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Count(System.Object[])">
            <summary>
            sql中的count操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Max(System.Object[])">
            <summary>
            sql中的max操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Min(System.Object[])">
            <summary>
            min操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Avg(System.Object[])">
            <summary>
            avg操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Contains(System.Object[])">
            <summary>
            模糊匹配操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.StartWith(System.Object[])">
            <summary>
            左模糊匹配操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.EndWith(System.Object[])">
            <summary>
            右模糊匹配操作
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Concat(System.Object[])">
            <summary>
            将多个栏位以字符串拼接的方式连接成新的栏位
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.SubString(System.Object[])">
            <summary>
            构建substring表达式
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.ConvertToString(System.Object[])">
            <summary>
            构建substring表达式
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.ConvertToDateTime(System.Object[])">
            <summary>
            构建Convert To DateTime表达式
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.New``1(System.String,EFFC.Extends.LinqDLR2SQL.LamdaSQLObject{``0},EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags)">
            <summary>
            获取一个LinqDLRColumn的新实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="columnexpress"></param>
            <param name="belongto"></param>
            <param name="sqlflags"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.New``1(System.Object,EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags)">
            <summary>
            生成一个对象的的栏位表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="sqlflags"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.New(System.Type,System.String,System.Object,EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags)">
            <summary>
            获取一个LinqDLRColumn的新实例
            </summary>
            <param name="dlrcolumntype"></param>
            <param name="columnexpress"></param>
            <param name="belongto"></param>
            <param name="sqlflags"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Convert2Express(System.Object)">
            <summary>
            将右侧值转化成对应的表达式，并添加条件值
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRColumn.Dispose">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.LinqDLRTable">
            <summary>
            linq表达式转为sql的table对象，该对象仅用于方便lamda表达式的创建作业，不具备扩展功能
            </summary>
        </member>
        <member name="M:EFFC.Extends.LinqDLR2SQL.LinqDLRTable.New``1(System.String,System.String,EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags)">
            <summary>
            生成一个LinqDLRTable的实例
            </summary>
            <param name="table">实际table的名称</param>
            <param name="aliasName">table的别名</param>
            <param name="sqlflags">sql相关操作符号</param>
            <returns>LinqDLRTable</returns>
        </member>
        <member name="T:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags">
            <summary>
            sql中会用到的各种操作符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.ParamFlag">
            <summary>
            参数符号，对应不同类型数据库的标记
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.LinkFlag">
            <summary>
            字符串链接符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.NotEqualFlag">
            <summary>
            不等于符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.EqualFlag">
            <summary>
            等于符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.GreaterFlag">
            <summary>
            大于符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.GreaterEqualFlag">
            <summary>
            大于等于符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.LessFlag">
            <summary>
            小于符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.LessEqualFlag">
            <summary>
            小于等于符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.LikeMatchFlag">
            <summary>
            用于like的匹配符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.Column_Quatation">
            <summary>
            栏位引用符号
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.IsNull">
            <summary>
            用于sql中is null的语句判断
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.IsNotNull">
            <summary>
            用于sql中is not null的语句判断
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.AddFlag">
            <summary>
            sql中的+运算符
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.SubstractFlag">
            <summary>
            sql中的-运算符
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.MultiplyFlag">
            <summary>
            sql中的*运算符
            </summary>
        </member>
        <member name="P:EFFC.Extends.LinqDLR2SQL.SqlOperatorFlags.DivideFlag">
            <summary>
            sql中的/运算符
            </summary>
        </member>
    </members>
</doc>
