<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFFC.Frame.Net.Module.Business</name>
    </assembly>
    <members>
        <member name="T:EFFC.Frame.Net.Module.Business.BaseBusiModule`3">
            <summary>
            业务模块的基本流程定义
            </summary>
            <typeparam name="TLogic"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.BaseBusiModule`3.CheckMyParametersAndConfig(`1,`2)">
            <summary>
            执行参数检查
            </summary>
            <param name="p"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.BaseBusiModule`3.InvokeBusiness(`1,`2)">
            <summary>
            根据参数集进行逻辑执行
            </summary>
            <param name="p"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.BaseBusiModule`3.AfterProcess(`1,`2)">
            <summary>
            执行后的参数和结果集处理
            </summary>
            <param name="bmp"></param>
            <param name="d"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.BaseBusiModule`3.OnLoadAssembly(EFFC.Frame.Net.Base.Module.Proxy.ProxyManager,System.Object,System.Collections.Generic.List{System.Type})">
            <summary>
            系统启动时加载业务逻辑模块和其他自定义加载作业
            </summary>
            <param name="ma"></param>
            <param name="options"></param>
            <param name="logics"></param>
        </member>
        <member name="T:EFFC.Frame.Net.Module.Business.BusiModule`3">
            <summary>
            业务处理模块的基类，动态加载对应的logic并执行之
            </summary>
            <typeparam name="LType"></typeparam>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.BusiModule`3.DoCheckMyParametersAndConfig(`1,`2)">
            <summary>
            执行前的参数检查
            </summary>
            <param name="bmp"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.BusiModule`3.AfterProcess(`1,`2)">
            <summary>
            执行后的参数和结果集处理
            </summary>
            <param name="bmp"></param>
            <param name="d"></param>
        </member>
        <member name="T:EFFC.Frame.Net.Module.Business.Datas.BusiDataCollection">
            <summary>
            Business模块使用的数据集合
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Datas.BusiDataCollection.Result">
            <summary>
            逻辑处理完成后的结果
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2">
            <summary>
            Logic的基类
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.CacheHelper">
            <summary>
            cache操作
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.FrameCache.SetCache(System.String,System.Object)">
            <summary>
            写入缓存,默认30分钟后超时
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.FrameCache.SetCache(System.String,System.Object,System.Int32)">
            <summary>
            写入缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationMinites"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.FrameCache.SetCache(System.String,System.Object,System.DateTime)">
            <summary>
            写入缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expirationtime"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.FrameCache.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            写入缓存（超过指定时间没用则过期）
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="slide"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.FrameCache.GetCache(System.String)">
            <summary>
            从缓存中获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.FrameCache.RemoveCache(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.Configs">
            <summary>
            Config操作
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.Name">
            <summary>
            logic的名称，busi模块根据该属性来调用对应的logic
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.CallContext_Parameter">
            <summary>
            提供call context环境下的参数资源集访问
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.CallContext_DataCollection">
            <summary>
            提供call context环境下的数据集访问
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.CallContext_CurrentToken">
            <summary>
            提供call context环境下的当前事务token访问
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.CallContext_ResourceManage">
            <summary>
            提供call context环境下的当前资源管理器访问
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.BeginTrans">
            <summary>
            開啟事務
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.CommitTrans">
            <summary>
            提交事務
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.RollBack">
            <summary>
            回滾事務
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.CreateResource``1">
            <summary>
            创建一个资源
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.NewResourceEntity``1">
            <summary>
            創建一個普通的資源對象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.NewTransResourceEntity``1">
            <summary>
            創建一個事務資源對象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.NewTransResourceEntity``1(EFFC.Frame.Net.Base.Token.TransactionToken)">
            <summary>
            創建一個事務資源對象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="token">指定的事务</param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DataConvertor">
            <summary>
            进行数据格式转换
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DataConvertor.ConvertTo``2(System.Object)">
            <summary>
            数据类型转化，将obj转化成T类型数据
            </summary>
            <typeparam name="Convert">转换器</typeparam>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="obj">待转换数据</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DataConvertor.ConvertTo``3(``1)">
            <summary>
            数据类型转化，将From转化成To类型数据
            </summary>
            <typeparam name="Convert">转换器</typeparam>
            <typeparam name="From">来源类型</typeparam>
            <typeparam name="To">目标类型</typeparam>
            <param name="obj">待转换数据</param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DOD">
            <summary>
            dod操作相关
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DO">
            <summary>
            dod操作相关-动态调用方法
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DOHelper.DO``1(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            DOD调用，param的第一个默认为instanceid
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyname"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DB">
            <summary>
            db操作相关
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.UseDefaultDBType(EFFC.Frame.Net.Base.Constants.DBType)">
            <summary>
            设定默认数据库类型
            </summary>
            <param name="dBType"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.LamdaTable(System.String,System.String,EFFC.Frame.Net.Base.Constants.DBType)">
            <summary>
            获取一个Lamdatable对象，可以进行lamda2sql的操作
            </summary>
            <param name="tablename"></param>
            <param name="alianname"></param>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.LamdaTable(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String,System.String)">
            <summary>
            获取一个Lamdatable对象，可以进行lamda2sql的操作，通过up自动识别db类型
            </summary>
            <param name="up"></param>
            <param name="tablename"></param>
            <param name="alianname"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.NewUnitParameter``1">
            <summary>
            获得一个新的UnitParamter
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.NewDBUnitParameter``1">
            <summary>
            获得一个新的UnitParamter，默认Dao为DB类型的DBAccess
            </summary>
            <typeparam name="DB"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.NewDBUnitParameter">
            <summary>
            获得一个新的UnitParamter
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.Excute(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Frame.Net.Unit.DB.DBExpress)">
            <summary>
            标准化DB执行操作
            </summary>
            <param name="p"></param>
            <param name="express"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.Excute(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Frame.Net.Base.Data.Base.FrameDLRObject)">
            <summary>
            通过json对象执行标准化DB操作
            </summary>
            <param name="p"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.Excute(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String)">
            <summary>
            通过json串执行标准化DB操作
            </summary>
            <param name="p"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.ExcuteLamda``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            执行lamda表达式
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="p"></param>
            <param name="ltable"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.LamdaQueryByPage``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            lamda表达式执行querybypage，注意，querybypage的时候是不能使用orderby的，否则会保存，order by通过orderbyexpress来提供
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="p"></param>
            <param name="ltable"></param>
            <param name="orderbyexpress">排序表达式，排序栏位不要携带table别名</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.ExcuteLamda(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{System.Object})">
            <summary>
            执行lamda表达式
            </summary>
            <param name="p"></param>
            <param name="ltable"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.LamdaQueryByPage(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{System.Object},System.String)">
            <summary>
            lamda表达式执行querybypage，注意，querybypage的时候是不能使用orderby的，否则会保存，order by通过orderbyexpress来提供
            </summary>
            <param name="p"></param>
            <param name="ltable"></param>
            <param name="orderbyexpress">排序表达式，排序栏位不要携带table别名</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.Count``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            根据lamdasql获取总比数资料
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="p">DB访问参数</param>
            <param name="ltable">LinqDLR2Sql表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.Max``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            根据lamdasql获取指定栏位的Max值
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="p"></param>
            <param name="ltable"></param>
            <param name="maxColumn"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.Min``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            根据lamdasql获取指定栏位的Min值
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="p"></param>
            <param name="ltable"></param>
            <param name="minColumn"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.Sum``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0},System.String)">
            <summary>
            根据lamdasql获取指定栏位的Sum值
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="p"></param>
            <param name="ltable"></param>
            <param name="sumColumn"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.IsExists``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,EFFC.Extends.LinqDLR2SQL.LinqDLR2Sql{``0})">
            <summary>
            判断资料是否存在
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="p"></param>
            <param name="ltable"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.QuickUpdate(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String,System.Object,System.Object)">
            <summary>
            快速执行简易Update操作
            </summary>
            <param name="p"></param>
            <param name="toTable">目标table</param>
            <param name="data">要更新数据对象</param>
            <param name="where">只支持and操作</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.QuickInsert(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String,System.Object)">
            <summary>
            快速执行简易Insert操作
            </summary>
            <param name="p"></param>
            <param name="toTable"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.QuickInsertNotExists(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String,System.Object,System.Object)">
            <summary>
            快速执行建议Insert操作，根据key值判定如果资料存在则不新增，否则执行新增操作
            </summary>
            <param name="p"></param>
            <param name="toTable"></param>
            <param name="data"></param>
            <param name="bykeys"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.QuickDelete(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String,System.Object)">
            <summary>
            快速执行建议Delete操作
            </summary>
            <param name="p"></param>
            <param name="toTable"></param>
            <param name="data"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.BulkInsert(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String,System.Object)">
            <summary>
            直接调用DB驱动执行大数据量新增操作
            并非所有的数据库引擎支持大数据量的新增操作，具体请看相关操作说明
            </summary>
            <param name="p"></param>
            <param name="toTable"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.Query``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String)">
            <summary>
            查询操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p"></param>
            <param name="actionflag">动作区分标记</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.QueryByPage``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String)">
            <summary>
            翻页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p"></param>
            <param name="actionflag">动作区分标记</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.NonQuery``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String)">
            <summary>
            非查询类的db操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p"></param>
            <param name="actionflag">动作区分标记</param>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.ExcuteSP``1(EFFC.Frame.Net.Unit.DB.Parameters.UnitParameter,System.String)">
            <summary>
            执行存储过程操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p"></param>
            <param name="actionflag">动作区分标记</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Module.Business.Logic.BaseLogic`2.DBHelper.ParseDBConnection(System.String,System.String@)">
            <summary>
            根据连接串解析db类型和有效的连接串
            </summary>
            <param name="conn">原始连接串</param>
            <param name="parsedConn">解析后的连接串</param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Frame.Net.Module.Business.Options.BusiOptions">
            <summary>
            BusiModule OnUsed加载时用到的选项
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Options.BusiOptions.BusinessAssemblyName">
            <summary>
            Logic所在dll的AssemblyName
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Module.Business.Parameters.BusiModuleParameter">
            <summary>
            业务处理模块专用参数集
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Parameters.BusiModuleParameter.CallLogicName">
            <summary>
            要调用的logic名称
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Module.Business.Parameters.BusiModuleParameter.CallAction">
            <summary>
            要调用的action
            </summary>
        </member>
    </members>
</doc>
